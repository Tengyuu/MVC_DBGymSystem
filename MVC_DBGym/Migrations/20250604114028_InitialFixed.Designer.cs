// <auto-generated />
using System;
using MVC_DBGym.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_DBGym.Migrations
{
    [DbContext(typeof(CmsContext))]
    [Migration("20250604114028_InitialFixed")]
    partial class InitialFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVC_DBGym.Models.Coach", b =>
                {
                    b.Property<int>("CoachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoachID"));

                    b.Property<string>("CoachName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoachID");

                    b.ToTable("Coache");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<int>("CoachID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CourseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("CoachID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberID");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("MemberID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("MVC_DBGym.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("PTypeID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID", "PTypeID");

                    b.HasIndex("PTypeID");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Ptype", b =>
                {
                    b.Property<int>("PTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PTypeID"));

                    b.Property<string>("PTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PTypeID");

                    b.ToTable("PTyp");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Reserve", b =>
                {
                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.HasKey("MemberID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Course", b =>
                {
                    b.HasOne("MVC_DBGym.Models.Coach", "Coach")
                        .WithMany("Course")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Payment", b =>
                {
                    b.HasOne("MVC_DBGym.Models.Member", "Member")
                        .WithMany("Payment")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MVC_DBGym.Models.PaymentType", b =>
                {
                    b.HasOne("MVC_DBGym.Models.Ptype", "PType")
                        .WithMany("PaymentType")
                        .HasForeignKey("PTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_DBGym.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PType");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Reserve", b =>
                {
                    b.HasOne("MVC_DBGym.Models.Course", "Course")
                        .WithMany("Reserve")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_DBGym.Models.Member", "Member")
                        .WithMany("Reserve")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Coach", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Course", b =>
                {
                    b.Navigation("Reserve");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Member", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Reserve");
                });

            modelBuilder.Entity("MVC_DBGym.Models.Ptype", b =>
                {
                    b.Navigation("PaymentType");
                });
#pragma warning restore 612, 618
        }
    }
}
